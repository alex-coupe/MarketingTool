@page "/templates/new"

@attribute [Authorize]

@inject NavigationManager _navigationManager
@inject IAuthenticationService AuthenticationService
@inject IDataService<TemplateViewModel> _templateService
@inject IDataService<TemplateSynonymViewModel> _synonymService

<h3>New Template</h3>

<div class="container text-center">

    <EditForm Model="viewModel" OnValidSubmit="HandleTemplateSubmit">
        <label>Template Name</label>
        <InputText type="text" @bind-Value="viewModel.Name" />
        <label>Content</label>
        <InputTextArea @bind-Value="viewModel.Content" />
        <label>Protect Template</label>
        <InputCheckbox @bind-Value="viewModel.Protected" />
        <button type="submit" class="btn btn-primary">Save</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>

    <label>Template Synonyms</label>
    <select @bind="Synonym">
        <option></option>
        @foreach (var synonym in synonymViewModels)
        {
            <option>@synonym.Key</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="InsertSynonym">Insert</button>
    @if (Saved)
    {
        <p class="text-center text-success">Saved Successfully!</p>
    }

    <p>@Error</p>

</div>

@code {

    TemplateViewModel viewModel = new TemplateViewModel();
    IEnumerable<TemplateSynonymViewModel> synonymViewModels = new List<TemplateSynonymViewModel>();

    private string Synonym { get; set; }

    private void InsertSynonym()
    {
        if (!string.IsNullOrEmpty(Synonym))
        {
            viewModel.Content += Synonym;
        }
    }

    public async Task HandleTemplateSubmit()
    {
        viewModel.Version = 1;
        viewModel.CreatingUser = AuthenticationService.User.UserId.ToString();
        try
        {
            await _templateService.Post(viewModel);
            viewModel = new TemplateViewModel();
            Saved = true;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            synonymViewModels = await _synonymService.GetAll();
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }

    private string Error { get; set; }

    private bool Saved { get; set; } = false;

}
