@page "/templates/edit/{Id:int}"

@attribute [Authorize]

@inject NavigationManager _navigationManager
@inject IAuthenticationService AuthenticationService
@inject IDataService<TemplateViewModel> _templateService
@inject IDataService<TemplateSynonymViewModel> _synonymService

<h3>Edit Template</h3>

<div class="container text-center">
    @if (!Loading)
    {
        <EditForm Model="viewModel" OnValidSubmit="HandleSubmit">
            <label>Template Name</label>
            <InputText type="text" @bind-Value="viewModel.Name" />
            <label>Content</label>
            <InputTextArea @bind-Value="viewModel.Content" />
            <label>Protect Template</label>
            <InputCheckbox @bind-Value="viewModel.Protected" />
            <button type="submit" class="btn btn-primary">Save</button>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>

        <label>Template Synonyms</label>
        <select @bind="Synonym">
            <option></option>
            @foreach (var synonym in synonymViewModels)
                {
                <option>@synonym.Key</option>
                }
        </select>
        <button class="btn btn-primary" @onclick="InsertSynonym">Insert</button>
    }
    else
    {
        <p>Loading...</p>
    }

    @if (Saved)
    {
        <p class="text-center text-success">Saved Successfully!</p>
    }

    <p>@Error</p>

</div>

@code {
    [Parameter]
    public int Id { get; set; }

    IEnumerable<TemplateSynonymViewModel> synonymViewModels = new List<TemplateSynonymViewModel>();

    private string Synonym { get; set; }

    private void InsertSynonym()
    {
        if (!string.IsNullOrEmpty(Synonym))
        {
            viewModel.Content += Synonym;
        }
    }

    TemplateViewModel viewModel = new TemplateViewModel();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            viewModel = await _templateService.Get(Id);
            synonymViewModels = await _synonymService.GetAll();
            Loading = false;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }

    public async Task HandleSubmit()
    {
        viewModel.ModifyingUser = AuthenticationService.User.UserId.ToString();
        viewModel.ModifiedDate = DateTime.Now;
        try
        {
            await _templateService.Put(viewModel);
            Saved = true;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }

    private string Error { get; set; }

    private bool Saved { get; set; } = false;

    private bool Loading { get; set; } = true;
}
