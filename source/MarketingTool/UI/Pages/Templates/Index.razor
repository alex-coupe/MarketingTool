@page "/templates/index"

@attribute [Authorize]

@inject NavigationManager _navigationManager
@inject IAuthenticationService AuthenticationService
@inject IDataService<TemplateViewModel> _templateService

<h3>Templates</h3>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Version</th>
            <th>Creator</th>
            <th>Created Date</th>
            <th>Protected</th>
            <th>Last Modified By</th>
            <th>Modified Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var template in templateViewModels)
        {
            <tr>
                <td>@template.Name</td>
                <td>@template.Version</td>
                <td>@template.CreatingUser</td>
                <td>@template.CreatedDate.ToString(new CultureInfo("en-GB"))</td>
                <td>@template.Protected</td>
                <td>@template.ModifyingUser</td>
                <td>@template.ModifiedDate?.ToString(new CultureInfo("en-GB"))</td>
                <NavLink class="btn btn-primary" href="@($"/templates/history/{template.Id}")">View History</NavLink>
                <NavLink class="@((template.Protected ? "btn btn-secondary disabled" : "btn btn-success"))" href="@($"/templates/template/{template.Id}")">Edit Template</NavLink>
            </tr>
        }
    </tbody>
</table>


<p>@Error</p>

@code {
    private string Error { get; set; }

    IEnumerable<TemplateViewModel> templateViewModels;

    protected override async Task OnInitializedAsync()
    {

        templateViewModels = new List<TemplateViewModel>();
        try
        {
            templateViewModels = await _templateService.GetAll();

          
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }

    }
}

