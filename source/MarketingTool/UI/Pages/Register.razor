@page "/register"

@inject IAuthenticationService _authenticationService
@inject IDataService<SubscriptionLevelViewModel> _subscriptionLevelsService
@inject NavigationManager _navigationManager

<h3>Register</h3>

<div class="container text-center">
    <EditForm Model="registerRequest" OnValidSubmit="HandleRegistration">
        <label>Enter Your Organisation's Name</label>
        <InputText type="text" @bind-Value="registerRequest.ClientName" />
        <label>Choose Your Subscription Type</label>
        <InputSelect @bind-Value="registerRequest.SubscriptionLevel">
            <option value="">Select classification ...</option>
            @foreach (var level in subscriptionLevels)
            {
                <option value="@level.Id">@level.Name</option>
            }
        </InputSelect>
        <label>Your First Name</label>
        <InputText type="text" @bind-Value="registerRequest.FirstName" />
        <label>Your Last Name</label>
        <InputText type="text" @bind-Value="registerRequest.LastName" />
        <label For="EmailField">Email Address</label>
        <InputText type="email" @bind-Value="registerRequest.EmailAddress" />
        <label For="PasswordField">Password</label>
        <InputText type="password" @bind-Value="registerRequest.Password" />
        <button type="submit" class="btn btn-primary">Register</button>
        <DataAnnotationsValidator />
        <ValidationSummary />
    </EditForm>
</div>
@code {

    RegistrationViewModel registerRequest = new RegistrationViewModel();

    private string Error { get; set; }

    private IEnumerable<SubscriptionLevelViewModel> subscriptionLevels;

    private async Task HandleRegistration()
    {
        try
        {
            await _authenticationService.Register(registerRequest);
            _navigationManager.NavigateTo("/dashboard");
        }
        catch (Exception ex)
        {
            Error = ex.Message;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        subscriptionLevels = await _subscriptionLevelsService.GetAll();

    }
}
